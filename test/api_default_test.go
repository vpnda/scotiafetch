/*
secure.scotiabank.com.har Mitmproxy2Swagger

Testing DefaultAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/vpnda/scotiafetch"
)

func Test_openapi_DefaultAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultAPIService ApiAccountsSummaryGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiAccountsSummaryGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiCampaignsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ApiCampaignsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiCardsCardIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var cardId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiCardsCardIdGet(context.Background(), cardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiCreditCreditIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var creditId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiCreditCreditIdGet(context.Background(), creditId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiCreditCreditIdTransactionsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var creditId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiCreditCreditIdTransactionsGet(context.Background(), creditId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiMpsaAccountsAccountIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accountId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiMpsaAccountsAccountIdGet(context.Background(), accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiMpsaAccountsAccountIdTransactionsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accountId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiMpsaAccountsAccountIdTransactionsGet(context.Background(), accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiRewardsRewardIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var rewardId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiRewardsRewardIdGet(context.Background(), rewardId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ApiTransactionsDepositAccountsDepositAccountIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var depositAccountId string

		resp, httpRes, err := apiClient.DefaultAPI.ApiTransactionsDepositAccountsDepositAccountIdGet(context.Background(), depositAccountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
